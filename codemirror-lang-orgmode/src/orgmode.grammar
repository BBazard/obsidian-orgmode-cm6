@top Program {
  ZerothSection?
  Heading*
}


Heading {
  shouldIndentHeading indentHeading
  headingLine Section?
  Heading*
  shouldDedentHeading dedentHeading
}

ZerothSection {
  notStartOfHeading
  CommentLine*
  PropertyDrawer?
  (
    notStartOfPropertyDrawer
    (
      notStartOfHeading
      (paragraph)
    )+
  )?
}

// https://orgmode.org/worg/org-syntax.html#Headings
headingLine {
  stars TodoKeyword? Priority? Title Tags? endofline
}

Title {
  sectionSpace? (titleObject sectionSpace?)*
}

Section {
  notStartOfHeading
  (CommentLine | Planning)*
  PropertyDrawer?
  (
    notStartOfPlanning notStartOfPropertyDrawer
    (
      notStartOfHeading
      (paragraph) // or GreaterBlock, etc...
    )+
  )?
}

paragraph {
  CommentLine
  |
  notStartOfComment (
    sectionSpace? (object sectionSpace?)* sectionEnd
  )
}

titleObject {
  link | titleTextMarkup | titleWord
}

object {
  link | textMarkup | sectionword
}

link {
  (isStartOfRegularLink RegularLink) |
  (isStartOfAngleLink AngleLink) |
  PlainLink
}

RegularLink {
  "[["
  regularLinkNestedObject (sectionSpace regularLinkNestedObject)*
  "]]"
}

AngleLink {
  "<"
  angleLinkNestedObject (sectionSpace angleLinkNestedObject)*
  ">"
}

regularLinkNestedObject {
  textMarkup | sectionWordRegularLink
}

angleLinkNestedObject {
  textMarkup | sectionWordAngleLink
}

titleTextMarkup {
  (isStartOfTitleTextBold TextBold) |
  (isStartOfTitleTextItalic TextItalic) |
  (isStartOfTitleTextUnderline TextUnderline) |
  (isStartOfTitleTextVerbatim TextVerbatim) |
  (isStartOfTitleTextCode TextCode) |
  (isStartOfTitleTextStrikeThrough TextStrikeThrough)
}

textMarkup {
  (isStartOfTextBold TextBold) |
  (isStartOfTextItalic TextItalic) |
  (isStartOfTextUnderline TextUnderline) |
  (isStartOfTextVerbatim TextVerbatim) |
  (isStartOfTextCode TextCode) |
  (isStartOfTextStrikeThrough TextStrikeThrough)
}

TextBold {
  "*"
  markupBoldNestedObject (sectionSpace markupBoldNestedObject)*
  "*"
}

TextItalic {
  "/"
  markupItalicNestedObject (sectionSpace markupItalicNestedObject)*
  "/"
}

TextUnderline {
  "_"
  markupUnderlineNestedObject (sectionSpace markupUnderlineNestedObject)*
  "_"
}

TextVerbatim {
  "="
  markupVerbatimNestedObject (sectionSpace markupVerbatimNestedObject)*
  "="
}

TextCode {
  "~"
  markupCodeNestedObject (sectionSpace markupCodeNestedObject)*
  "~"
}

TextStrikeThrough {
  "+"
  markupStrikeThroughNestedObject (sectionSpace markupStrikeThroughNestedObject)*
  "+"
}

markupBoldNestedObject {
  (sectionwordBold | link)+
}

markupItalicNestedObject {
  (sectionwordItalic | link)+
}

markupUnderlineNestedObject {
  (sectionwordUnderline | link)+
}

markupVerbatimNestedObject {
  (sectionwordVerbatim | link)+
}

markupCodeNestedObject {
  (sectionwordCode | link)+
}

markupStrikeThroughNestedObject {
  (sectionwordStrikeThrough | link)+
}

@context context_tracker from "./external-tokens"

@external tokens isStartOfRegularLink_lookaround from "./external-tokens" { isStartOfRegularLink }
@external tokens isStartOfAngleLink_lookaround from "./external-tokens" { isStartOfAngleLink }

@external tokens plainLink_tokenizer from "./external-tokens" { PlainLink }

@external tokens isStartOfTitleTextMarkup_lookaround from "./external-tokens" {
  isStartOfTitleTextBold,
  isStartOfTitleTextItalic,
  isStartOfTitleTextUnderline,
  isStartOfTitleTextVerbatim,
  isStartOfTitleTextCode,
  isStartOfTitleTextStrikeThrough
}

@external tokens isStartOfTextMarkup_lookaround from "./external-tokens" {
  isStartOfTextBold,
  isStartOfTextItalic,
  isStartOfTextUnderline,
  isStartOfTextVerbatim,
  isStartOfTextCode,
  isStartOfTextStrikeThrough
}


// https://orgmode.org/worg/org-syntax.html#Planning
Planning { planningStart endofline }

// https://orgmode.org/worg/org-syntax.html#Property_Drawers
@external tokens propertydrawer_tokenizer from "./external-tokens" { PropertyDrawer }

@external tokens todokeyword_tokenizer from "./external-tokens" { TodoKeyword }
@external tokens priority_tokenizer from "./external-tokens" { Priority }


@external tokens notStartOfPlanning_lookaround from "./external-tokens" { notStartOfPlanning }
@external tokens notStartOfPropertyDrawer_lookaround from "./external-tokens" { notStartOfPropertyDrawer }

@external tokens notStartOfHeading_lookaround from "./external-tokens" { notStartOfHeading }
@external tokens notStartOfComment_lookaround from "./external-tokens" { notStartOfComment }

@external tokens shouldIndentHeading_lookaround from "./external-tokens" { shouldIndentHeading }
@external tokens indentHeading_lookaround from "./external-tokens" { indentHeading }
@external tokens shouldDedentHeading_lookaround from "./external-tokens" { shouldDedentHeading }
@external tokens dedentHeading_lookaround from "./external-tokens" { dedentHeading }


@external tokens stars_tokenizer from "./external-tokens" { stars }

@tokens {
  CommentLine { "#" ![\n]* ("\n" | @eof) }
  planningStart { ("DEADLINE:"|"SCHEDULED:"|"CLOSED:") }
}


@external tokens sectionEnd_tokenizer from "./external-tokens" { sectionEnd }
@external tokens sectionSpace_tokenizer from "./external-tokens" { sectionSpace }
@external tokens titleWord_tokenizer from "./external-tokens" { titleWord }
@external tokens tags_tokenizer from "./external-tokens" { Tags }

// need to be last to not override something else
@external tokens endofline_tokenizer from "./external-tokens" { endofline }

// https://orgmode.org/worg/org-syntax.html#Sections
@external tokens sectionWord_tokenizer from "./external-tokens" { sectionword }

@external tokens sectionWordBold_tokenizer from "./external-tokens" { sectionwordBold }
@external tokens sectionWordItalic_tokenizer from "./external-tokens" { sectionwordItalic }
@external tokens sectionWordUnderline_tokenizer from "./external-tokens" { sectionwordUnderline }
@external tokens sectionWordVerbatim_tokenizer from "./external-tokens" { sectionwordVerbatim }
@external tokens sectionWordCode_tokenizer from "./external-tokens" { sectionwordCode }
@external tokens sectionWordStrikeThrough_tokenizer from "./external-tokens" { sectionwordStrikeThrough }

@external tokens sectionWordAngleLink_tokenizer from "./external-tokens" { sectionWordAngleLink }
@external tokens sectionWordRegularLink_tokenizer from "./external-tokens" { sectionWordRegularLink }

