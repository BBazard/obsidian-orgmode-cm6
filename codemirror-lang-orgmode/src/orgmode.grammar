@top Program {
  ZerothSection?
  Heading*
}

ZerothSection {
  notStartOfHeading
  (startOfComment CommentLine)*
  PropertyDrawer?
  (
    notStartOfPropertyDrawer
    (
      notStartOfHeading
      lesserElement
    )+
  )?
}

// https://orgmode.org/worg/org-syntax.html#Headings
Heading {
  shouldIndentHeading indentHeading
  stars TodoKeyword? Priority? Title? Tags? endofline
  Section?
  Heading*
  shouldDedentHeading dedentHeading
}

Title {
  object+
}

Section {
  notStartOfHeading
  ((startOfComment CommentLine) | (isStartOfPlanningLine planningLine))*
  PropertyDrawer?
  (
    notStartOfPropertyDrawer
    (
      notStartOfHeading
      lesserElement
    )*
  )?
}

lesserElement {  // excluding Planning and Comment
  Block |
  (
    notStartOfABlock
    (
      (startOfComment CommentLine) |
      (
        notStartOfComment
        paragraph { object+ }
      ) | (
        startOfKeywordComment
        KeywordComment
      )
    )
  )
}

PropertyDrawer {
  propertyDrawerHeader
  PropertyDrawerContent?
  propertyDrawerFooter
}


Block {
  BlockHeader
  (
    BlockContentDynamic
    | BlockContentCenter
    | BlockContentQuote
    | BlockContentComment
    | BlockContentExample
    | BlockContentExport
    | BlockContentSrc
    | BlockContentVerse
    | BlockContentSpecial
  )
  BlockFooter
}

// https://orgmode.org/worg/org-syntax.html#Planning
planningLine {
  ((PlanningDeadline | PlanningScheduled | PlanningClosed) PlanningValue)+
}

object {
  link | textMarkup | objectToken
}

link {
  RegularLink | AngleLink | PlainLink
}

RegularLink {
  isStartOfRegularLink
  "[["
  object+
  exitRegularLink  // ]]
}

AngleLink {
  isStartOfAngleLink
  "<"
  object+
  exitAngleLink  // >
}

textMarkup {
  (isStartOfTextBold TextBold) |
  (isStartOfTextItalic TextItalic) |
  (isStartOfTextUnderline TextUnderline) |
  (isStartOfTextVerbatim TextVerbatim) |
  (isStartOfTextCode TextCode) |
  (isStartOfTextStrikeThrough TextStrikeThrough)
}

TextBold {
  "*"
  object+
  isEndOfTextBold  // *
}

TextItalic {
  "/"
  object+
  isEndOfTextItalic  // /
}

TextUnderline {
  "_"
  object+
  isEndOfTextUnderline  // _
}

TextVerbatim {
  "="
  object+
  isEndOfTextVerbatim  // =
}

TextCode {
  "~"
  object+
  isEndOfTextCode  // ~
}

TextStrikeThrough {
  "+"
  object+
  isEndOfTextStrikeThrough  // +
}

@context context_tracker from "./external-tokens"

// Exit tokens are always true so they must be the
// first ones to be tested so that other tokens are not accepted before them
@external tokens exitRegularLink_tokenizer from "./external-tokens" { exitRegularLink }
@external tokens exitAngleLink_tokenizer from "./external-tokens" { exitAngleLink }

@external tokens isEndOfTextMarkup_tokenizer from "./external-tokens" {
  isEndOfTextBold,
  isEndOfTextItalic,
  isEndOfTextUnderline,
  isEndOfTextVerbatim,
  isEndOfTextCode,
  isEndOfTextStrikeThrough
}

@external tokens block_tokenizer from "./external-tokens" {
  notStartOfABlock,
  BlockHeader,
  BlockFooter
}

@external tokens blockContent_tokenizer from "./external-tokens" {
    BlockContentDynamic,
    BlockContentCenter,
    BlockContentQuote,
    BlockContentComment,
    BlockContentExample,
    BlockContentExport,
    BlockContentSrc,
    BlockContentVerse,
    BlockContentSpecial
}

@external tokens startOfComment_lookaround from "./external-tokens" { startOfComment }

@external tokens startOfKeywordComment_lookaround from "./external-tokens" { startOfKeywordComment }

@external tokens isStartOfRegularLink_lookaround from "./external-tokens" { isStartOfRegularLink }
@external tokens isStartOfAngleLink_lookaround from "./external-tokens" { isStartOfAngleLink }
@external tokens plainLink_tokenizer from "./external-tokens" { PlainLink }

@external tokens isStartOfTextMarkup_lookaround from "./external-tokens" {
  isStartOfTextBold,
  isStartOfTextItalic,
  isStartOfTextUnderline,
  isStartOfTextVerbatim,
  isStartOfTextCode,
  isStartOfTextStrikeThrough
}


@external tokens todokeyword_tokenizer from "./external-tokens" { TodoKeyword }
@external tokens priority_tokenizer from "./external-tokens" { Priority }


@external tokens isStartOfPlanningLine_lookaround from "./external-tokens" { isStartOfPlanningLine }

// https://orgmode.org/worg/org-syntax.html#Property_Drawers
@external tokens propertyDrawerContent_tokenizer from "./external-tokens" { PropertyDrawerContent }
@external tokens propertyDrawer_tokenizer from "./external-tokens" { notStartOfPropertyDrawer, propertyDrawerHeader, propertyDrawerFooter }

@external tokens notStartOfComment_lookaround from "./external-tokens" { notStartOfComment }

@external tokens startOfHeading_lookaround from "./external-tokens" { notStartOfHeading, shouldIndentHeading, shouldDedentHeading }
@external tokens indentHeading_lookaround from "./external-tokens" { indentHeading }
@external tokens dedentHeading_lookaround from "./external-tokens" { dedentHeading }


@external tokens stars_tokenizer from "./external-tokens" { stars }



@external tokens planningKeyword_tokenizer from "./external-tokens" {
  PlanningDeadline
  PlanningScheduled
  PlanningClosed
}
@external tokens planningValue_tokenizer from "./external-tokens" { PlanningValue }

@external tokens tags_tokenizer from "./external-tokens" { Tags }

@external tokens endofline_tokenizer from "./external-tokens" { endofline }

@external tokens object_tokenizer from "./external-tokens" { objectToken }

@tokens {
  CommentLine { "#" ("\n" | @eof | (" " ![\n]* ("\n" | @eof))) }
  KeywordComment { "#+" ![\n]* ("\n" | @eof) }
}